export * from './common';
export * from './budget';
export * from './tax';

// Amendment types for admin panel
export interface Amendment {
  id: string;
  amendmentNumber: number;
  title: string;
  amendmentText: string;
  originalAmendmentText?: string;
  isOverridden: boolean;
  totalVotes: number;
  basedOnTopic: string;
  winningSolution: {
    title: string;
    description: string;
  };
  status: 'active' | 'proposed' | 'ratified';
  overriddenBy?: string;
  overriddenAt?: string;
}

// This is the structure the application uses internally
// It is generated by the useSurvey hook from the SurveyFile
export interface Topic {
  id: string; // Will be category id, e.g., 'cat-1'
  name: string; // Category name
  categoryId: number;
  version: string;
  questions: Question[];
}

export interface Solution {
  id: string;
  title: string;
  description: string;
  status: 'pending' | 'approved' | 'rejected';
  votes?: number;
  suggesterId?: string;
}

export interface User {
  id: string;
  email: string;
  name?: string; // Optional, displayName is primary
  displayName: string;
  avatar?: string;
  role?: 'user' | 'admin';
  isMuted: boolean;
  isVerified: boolean;
  
  // Profile
  zipCode?: string;
  city?: string;
  state?: string;
  metroArea?: string;
  congressionalDistrict?: string;
  birthYear?: string;
  politicalAlignment?: 'Left' | 'Center' | 'Right';
  partyPreference?: string;

  // Stats
  votesCast: number;
  totalComments: number;
  totalSolutionVotes: number;
  approvedSuggestions?: number;
  totalUpvotes?: number;
  
  // Gamification
  badges?: Badge[];
  badgeProgress?: BadgeProgress[];
  lastActivityDate?: string; // ISO string
  currentStreak?: number;
  
  // Tracking
  votedSolutions?: { topicId: string; solutionId: string | null }[];
  votedLawTopics?: number;
  votedAmendmentTopics?: number;
  votedRuleTopics?: number;
  viewedCivicPage?: boolean;
  viewedRedistrictingMap?: boolean;
  viewedAllRedistrictingOverlays?: boolean;
  exploredDistricts?: string[];
  districtsExploredCount?: number;
  approvedCommunityPosts?: number;
  viewedAmendmentsPage?: boolean;

  // Auth/Internal
  resetToken?: string;
  resetTokenExpiry?: string;
  lastReminderSent?: string;
}

export interface Badge {
  id: string;
  name: string;
  description: string;
  icon?: string;
  color?: string;
  earnedAt?: string;
  criteria?: {
    type: 'totalComments' | 'totalVotes' | 'totalSolutionVotes' | 'approvedSuggestions' | 'commentUpvotes' | 'manual' | 'streak' | 'viewAmendmentsPage' | 'votedLaw' | 'votedAmendment' | 'votedRule' | 'viewCivicPage' | 'viewRedistrictingMap' | 'viewAllRedistrictingOverlays' | 'exploreDistrict' | 'approvedCommunityPosts';
    threshold?: number;
  };
}

export interface BadgeProgress {
  badgeId: string;
  currentCount: number;
  threshold: number;
}

export interface Comment {
  id: string;
  text: string;
  author: Pick<User, 'id' | 'displayName' | 'badges'>;
  timestamp: string; // ISO string
  parentId: string | null; // For replies
  topicId?: string; // To associate comment with a topic
  upvotes?: number;
  flags?: number;
  status?: 'pending' | 'approved' | 'rejected';
}

// Common Ground Types

export type Score = -100 | -33 | 33 | 100;

export interface Group {
  id: string;
  ownerUserId: string;
  nickname?: string;
  version: string; // e.g., 'v1'
  groupCode: string; // for joining
  createdAt: string; // ISO Date String
  updatedAt: string; // ISO Date String
}

export interface GroupMember {
  id: string; // userId
  role: 'owner' | 'member';
  alias: string;
  joinedAt: string; // ISO Date String
}

export interface Invite {
  id: string;
  inviteCode: string;
  email?: string;
  status: 'pending' | 'accepted' | 'revoked';
  createdAt: string; // ISO Date String
  expiresAt: string; // ISO Date String
}

export interface SurveyVersion {
  id: 'v1' | 'v2' | 'v3' | 'v4';
  status: 'published' | 'draft';
  provocativeness: 1 | 2 | 3 | 4;
}

export interface Question {
  id: string; // e.g., 'Q001'
  topicId: string; // e.g., 'cat-1'
  prompt: string;
  version: string;
  options: Option[];
}

export interface Option {
  id: string; // Will be generated, e.g., 'Q001-0'
  questionId: string;
  label: string;
  score: Score;
  version: string;
}

export interface Response {
  id: string; // questionId or version:questionId
  version: string;
  questionId: string;
  optionId: string;
  score: Score;
  answeredAt: string; // ISO Date String
}

// New efficient survey response structure - single entity per user per survey
export interface UserSurveyResponse {
  userId: string;
  surveyVersion: string;
  responses: { [questionId: string]: number }; // questionId -> score
  topicScores: { [topicId: string]: { meanScore: number; answeredCount: number } }; // consolidated topic scores
  completedAt: string;
  updatedAt: string;
}

export interface AmendmentVote {
  id: string; // amendmentId
  optionId: string;
  score: Score;
  votedAt: string; // ISO Date String
}

export interface TopicScoreUser {
  id: string; // topicId or version:topicId
  version: string;
  topicId: string;
  meanScore: number;
  answeredCount: number;
  updatedAt: string; // ISO Date String
}

export interface TopicScoreGroup {
  id: string; // topicId or version:topicId
  version: string;
  topicId: string;
  values: { userId: string; score: number }[];
  min: number;
  max: number;
  range: number;
  label: 'safe' | 'hot';
  agreementPct: number;
  updatedAt: string; // ISO Date String
}

export interface CategoryVector {
  id: string; // userId or version:userId
  version: string;
  userId: string;
  scores: number[]; // Array of 10 scores
  updatedAt: string; // ISO Date String
}

export interface ClusterSnapshot {
  id: string; // version or timestamp
  version: string;
  pca2d: { userId: string; x: number; y: number }[];
  clusters: { id: string; centroid: number[]; members: string[] }[];
  updatedAt: string; // ISO Date String
}

export interface Preset {
  id: string;
  name: string;
  categories: number[]; // catId
  topics: string[]; // topicId
  createdAt: string; // ISO Date String
}

export interface Event {
  id: string;
  type: string;
  userId?: string;
  groupId?: string;
  meta: Record<string, any>;
  ts: string; // ISO Date String
}

export interface Notification {
  id: string;
  recipientUserId: string;
  type: 'pairwise_ready' | 'nudge_to_survey';
  payload: Record<string, any>;
  createdAt: string; // ISO Date String
  sentAt?: string; // ISO Date String
}

// This represents the structure of the JSON file
export interface SurveyFile {
  version: string;
  meta: {
    categories: Record<string, string>;
    option_scores: Score[];
  };
  questions: {
    id: string;
    category_id: number;
    prompt: string;
    options: {
      label: string;
      score: Score;
    }[];
  }[];
  // This is added dynamically by the useSurvey hook
  topics?: Topic[];
}